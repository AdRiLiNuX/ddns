// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

/*
Package api is a generated protocol buffer package.

API Service

It is generated from these files:
	api/api.proto

It has these top-level messages:
	Record
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Message represents a simple message sent to the Echo service.
type Record struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Record IP address
	Ip string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	// Record Name
	Domain string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	// Record Type see https://github.com/miekg/dns/blob/master/types.go#L27
	Type string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	// Expiration of the record, after which will be removed.
	// Default is 0 for not expiring
	Expires int32 `protobuf:"varint,5,opt,name=expires" json:"expires,omitempty"`
	// TTL time to live of the record
	TTL int32 `protobuf:"varint,6,opt,name=TTL,json=tTL" json:"TTL,omitempty"`
	// Add a PTR (reverse) record
	PTR bool `protobuf:"varint,7,opt,name=PTR,json=pTR" json:"PTR,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Record) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Record) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Record) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Record) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Record) GetExpires() int32 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (m *Record) GetTTL() int32 {
	if m != nil {
		return m.TTL
	}
	return 0
}

func (m *Record) GetPTR() bool {
	if m != nil {
		return m.PTR
	}
	return false
}

func init() {
	proto.RegisterType((*Record)(nil), "api.Record")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DDNSService service

type DDNSServiceClient interface {
	// Echo method receives a simple message and returns it.
	// The message posted as the id parameter will also be returned.
	SaveRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Record, error)
	DeleteRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Record, error)
}

type dDNSServiceClient struct {
	cc *grpc.ClientConn
}

func NewDDNSServiceClient(cc *grpc.ClientConn) DDNSServiceClient {
	return &dDNSServiceClient{cc}
}

func (c *dDNSServiceClient) SaveRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := grpc.Invoke(ctx, "/api.DDNSService/SaveRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDNSServiceClient) DeleteRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := grpc.Invoke(ctx, "/api.DDNSService/DeleteRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DDNSService service

type DDNSServiceServer interface {
	// Echo method receives a simple message and returns it.
	// The message posted as the id parameter will also be returned.
	SaveRecord(context.Context, *Record) (*Record, error)
	DeleteRecord(context.Context, *Record) (*Record, error)
}

func RegisterDDNSServiceServer(s *grpc.Server, srv DDNSServiceServer) {
	s.RegisterService(&_DDNSService_serviceDesc, srv)
}

func _DDNSService_SaveRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSServiceServer).SaveRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DDNSService/SaveRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSServiceServer).SaveRecord(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDNSService_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSServiceServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DDNSService/DeleteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSServiceServer).DeleteRecord(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

var _DDNSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.DDNSService",
	HandlerType: (*DDNSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveRecord",
			Handler:    _DDNSService_SaveRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _DDNSService_DeleteRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xcd, 0x4a, 0xf4, 0x30,
	0x18, 0x85, 0x49, 0x3b, 0xed, 0x7c, 0xdf, 0x3b, 0xfe, 0x11, 0x50, 0x42, 0x99, 0x45, 0xe9, 0xaa,
	0xcc, 0x62, 0x82, 0xba, 0x13, 0xdc, 0x48, 0x97, 0x45, 0x24, 0xed, 0xca, 0x5d, 0x9c, 0xbe, 0x0c,
	0x81, 0xb1, 0x09, 0x99, 0x50, 0x94, 0x61, 0x36, 0x5e, 0x82, 0xee, 0xbc, 0x2d, 0x6f, 0xc1, 0x0b,
	0x91, 0xa6, 0x15, 0xdd, 0xb9, 0xcb, 0xf3, 0x24, 0x1c, 0x72, 0x0e, 0x1c, 0x4a, 0xa3, 0xb8, 0x34,
	0x6a, 0x69, 0xac, 0x76, 0x9a, 0x86, 0xd2, 0xa8, 0x64, 0xbe, 0xd6, 0x7a, 0xbd, 0x41, 0xee, 0xaf,
	0xda, 0x56, 0x3b, 0xe9, 0x94, 0x6e, 0xb7, 0xc3, 0x93, 0xec, 0x95, 0x40, 0x2c, 0x70, 0xa5, 0x6d,
	0x43, 0x8f, 0x20, 0x50, 0x0d, 0x23, 0x29, 0xc9, 0xff, 0x8b, 0x40, 0x0d, 0x6c, 0x58, 0x30, 0xb2,
	0xa1, 0x67, 0x10, 0x37, 0xfa, 0x51, 0xaa, 0x96, 0x85, 0xde, 0x8d, 0x44, 0x29, 0x4c, 0xdc, 0xb3,
	0x41, 0x36, 0xf1, 0xd6, 0x9f, 0x29, 0x83, 0x29, 0x3e, 0x19, 0x65, 0x71, 0xcb, 0xa2, 0x94, 0xe4,
	0x91, 0xf8, 0x46, 0x7a, 0x02, 0x61, 0x5d, 0x97, 0x2c, 0xf6, 0x36, 0x74, 0x75, 0xd9, 0x9b, 0xbb,
	0x5a, 0xb0, 0x69, 0x4a, 0xf2, 0x7f, 0x22, 0x34, 0xb5, 0xb8, 0x78, 0x27, 0x30, 0x2b, 0x8a, 0xdb,
	0xaa, 0x42, 0xdb, 0xa9, 0x15, 0xd2, 0x6b, 0x80, 0x4a, 0x76, 0x38, 0xfe, 0x73, 0xb6, 0xec, 0x1b,
	0x0e, 0x90, 0xfc, 0x86, 0xec, 0xf4, 0xe5, 0xe3, 0xf3, 0x2d, 0x38, 0xce, 0x80, 0x77, 0xe7, 0xdc,
	0x7a, 0x77, 0x45, 0x16, 0xb4, 0x84, 0x83, 0x02, 0x37, 0xe8, 0xfe, 0x0e, 0xc8, 0x7c, 0xc0, 0x7c,
	0x91, 0xfc, 0x04, 0xf0, 0xdd, 0x50, 0x73, 0xcf, 0x77, 0x7d, 0xb3, 0xfd, 0x4d, 0x74, 0xdf, 0xcf,
	0xfa, 0x10, 0xfb, 0xfd, 0x2e, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x28, 0xa8, 0xd2, 0x73,
	0x01, 0x00, 0x00,
}
