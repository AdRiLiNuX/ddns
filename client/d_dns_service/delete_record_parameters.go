package d_dns_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteRecordParams creates a new DeleteRecordParams object
// with the default values initialized.
func NewDeleteRecordParams() *DeleteRecordParams {
	var ()
	return &DeleteRecordParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteRecordParamsWithTimeout creates a new DeleteRecordParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteRecordParamsWithTimeout(timeout time.Duration) *DeleteRecordParams {
	var ()
	return &DeleteRecordParams{

		timeout: timeout,
	}
}

// NewDeleteRecordParamsWithContext creates a new DeleteRecordParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteRecordParamsWithContext(ctx context.Context) *DeleteRecordParams {
	var ()
	return &DeleteRecordParams{

		Context: ctx,
	}
}

// NewDeleteRecordParamsWithHTTPClient creates a new DeleteRecordParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteRecordParamsWithHTTPClient(client *http.Client) *DeleteRecordParams {
	var ()
	return &DeleteRecordParams{
		HTTPClient: client,
	}
}

/*DeleteRecordParams contains all the parameters to send to the API endpoint
for the delete record operation typically these are written to a http.Request
*/
type DeleteRecordParams struct {

	/*Domain*/
	Domain string
	/*Type*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete record params
func (o *DeleteRecordParams) WithTimeout(timeout time.Duration) *DeleteRecordParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete record params
func (o *DeleteRecordParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete record params
func (o *DeleteRecordParams) WithContext(ctx context.Context) *DeleteRecordParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete record params
func (o *DeleteRecordParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete record params
func (o *DeleteRecordParams) WithHTTPClient(client *http.Client) *DeleteRecordParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete record params
func (o *DeleteRecordParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomain adds the domain to the delete record params
func (o *DeleteRecordParams) WithDomain(domain string) *DeleteRecordParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the delete record params
func (o *DeleteRecordParams) SetDomain(domain string) {
	o.Domain = domain
}

// WithType adds the typeVar to the delete record params
func (o *DeleteRecordParams) WithType(typeVar string) *DeleteRecordParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the delete record params
func (o *DeleteRecordParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteRecordParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param domain
	if err := r.SetPathParam("domain", o.Domain); err != nil {
		return err
	}

	// path param type
	if err := r.SetPathParam("type", o.Type); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
